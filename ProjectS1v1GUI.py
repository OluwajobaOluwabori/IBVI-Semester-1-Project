# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ProjectS1v1GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(950, 600)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")

        # Add the Menu Bar at the top
        self.menuBarWidget = QtWidgets.QWidget(self.centralwidget)
        self.menuBarLayout = QtWidgets.QHBoxLayout(self.menuBarWidget)
        self.menuBarLayout.setContentsMargins(0, 0, 0, 0)
        self.menuBarLayout.setSpacing(5)

        # Add Menu Button (pbMenu)
        self.pbMenu = QtWidgets.QPushButton(self.menuBarWidget)
        font = QtGui.QFont()
        font.setKerning(True)
        self.pbMenu.setFont(font)
        self.pbMenu.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/menu.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pbMenu.setIcon(icon4)
        self.pbMenu.setCheckable(True)
        self.pbMenu.setObjectName("pbMenu")
        self.menuBarLayout.addWidget(self.pbMenu)

        # Add a spacer
        self.menuBarLayout.addItem(QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Expanding))

        # Menu Bar Styling
        self.menuBarWidget.setStyleSheet("""
            QWidget {
                background: linear-gradient(to right, #1F95EF, #2F3C4F);
                border: none;
                padding: 5px;
                border-bottom: 1px solid #B0BEC5;  
            }
            QPushButton {
                background-color: transparent;
                color: white;
                font: bold 14px 'Segoe UI';
                border: none;
                padding: 5px 15px;
            }
            QPushButton:hover {
                background-color: rgba( 86, 101, 115, 0.5);
                border-radius: 5px;
            }
        """)

        # Add the menu bar widget to the main vertical layout
        self.verticalLayout_9.addWidget(self.menuBarWidget)


        self.gridLayout1 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout1.setContentsMargins(0, 0, 0, 0)
        self.gridLayout1.setSpacing(0)
        self.gridLayout1.setObjectName("gridLayout")

        # self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        # self.horizontalLayout_8.setSpacing(0)
        # self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.icon_only_widget = QtWidgets.QWidget(self.centralwidget)
        self.icon_only_widget.setMinimumWidth(50)
        self.icon_only_widget.setMaximumWidth(50)  # Limit its width
        self.icon_only_widget.setStyleSheet("""
            QWidget {
                background-color: rgba( 86, 101, 115, 0.5);
                border-bottom: 1px solid #b0b0b0;
            }
            QPushButton {
                color: white;
                font: 14px 'Segoe UI';
                border: none;
                padding: 10px;
                border-radius: 5px;
                transition: background-color 0.3s ease, color 0.3s ease;
            }
            QPushButton:hover {
                background-color: #F5F5F5;
                color: black;
            }
            QPushButton:checked {
                background-color: #F5F5F5;
                color: white;
                font-weight: bold;
            }
        """)

        self.icon_only_widget.setObjectName("icon_only_widget")
        # self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.icon_only_widget)
        # self.verticalLayout_3.setContentsMargins(-1, 0, 0, 0)
        # self.verticalLayout_3.setSpacing(15)
        # self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.icon_only_widget)
        self.verticalLayout_4.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout_4.setContentsMargins(9, 9, 9, 9)
        self.verticalLayout_4.setSpacing(15)
        self.verticalLayout_4.setObjectName("verticalLayout_4")

        self.verticalLayout_4.insertWidget(0, self.menuBarWidget)

        # # Create a separator (QFrame)
        # self.menuSeparator = QtWidgets.QFrame(self.icon_only_widget)
        # self.menuSeparator.setFrameShape(QtWidgets.QFrame.HLine)
        # self.menuSeparator.setFrameShadow(QtWidgets.QFrame.Sunken)
        # self.menuSeparator.setStyleSheet("color: #B0BEC5;")  # Light gray or soft blue
        # self.menuSeparator.setFixedHeight(2)  # Adjust height as needed
        # self.menuSeparator.setFixedWidth(45)
        # # Insert the separator below the menu button and MediMetrics label
        # self.verticalLayout_4.insertWidget(1, self.menuSeparator)  # Add after the menu button and label

        self.pbDataManagement1 = QtWidgets.QPushButton(self.icon_only_widget)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferAntialias)
        self.pbDataManagement1.setFont(font)
        self.pbDataManagement1.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons8-utilisateur-sexe-neutre-50 (1).png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon.addPixmap(QtGui.QPixmap(":/icons8-utilisateur-sexe-neutre-50 (1).png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.pbDataManagement1.setIcon(icon)
        self.pbDataManagement1.setCheckable(True)
        self.pbDataManagement1.setAutoExclusive(True)
        self.pbDataManagement1.setObjectName("pbDataManagement1")
        self.verticalLayout_4.addWidget(self.pbDataManagement1)
        self.pbDataAnalysis1 = QtWidgets.QPushButton(self.icon_only_widget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pbDataAnalysis1.setFont(font)
        self.pbDataAnalysis1.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons8-graphique-combiné-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon1.addPixmap(QtGui.QPixmap(":/icons8-graphique-combiné-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.pbDataAnalysis1.setIcon(icon1)
        self.pbDataAnalysis1.setCheckable(True)
        self.pbDataAnalysis1.setAutoExclusive(True)
        self.pbDataAnalysis1.setObjectName("pbDataAnalysis1")
        self.verticalLayout_4.addWidget(self.pbDataAnalysis1)

        self.pbImageProcessing1 = QtWidgets.QPushButton(self.icon_only_widget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pbImageProcessing1.setFont(font)
        self.pbImageProcessing1.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons8-image-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon3.addPixmap(QtGui.QPixmap(":/icons8-image-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.pbImageProcessing1.setIcon(icon3)
        self.pbImageProcessing1.setCheckable(True)
        self.pbImageProcessing1.setAutoExclusive(True)
        self.pbImageProcessing1.setObjectName("pbImageProcessing1")
        self.verticalLayout_4.addWidget(self.pbImageProcessing1)

        self.pbVideoProcessing1 = QtWidgets.QPushButton(self.icon_only_widget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pbVideoProcessing1.setFont(font)
        self.pbVideoProcessing1.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icons8-vidéo-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon5.addPixmap(QtGui.QPixmap("icons8-vidéo-48.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.pbVideoProcessing1.setIcon(icon5)
        self.pbVideoProcessing1.setCheckable(True)
        self.pbVideoProcessing1.setAutoExclusive(True)
        self.pbVideoProcessing1.setObjectName("pbVideoProcessing1")
        self.verticalLayout_4.addWidget(self.pbVideoProcessing1)

        # self.verticalLayout_3.addLayout(self.verticalLayout_4)
        self.pbSpectrumAnalysis1 = QtWidgets.QPushButton(self.icon_only_widget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pbSpectrumAnalysis1.setFont(font)
        self.pbSpectrumAnalysis1.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons8-signal-rfid-50.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon2.addPixmap(QtGui.QPixmap(":/icons8-signal-rfid-50.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.pbSpectrumAnalysis1.setIcon(icon2)
        self.pbSpectrumAnalysis1.setCheckable(True)
        self.pbSpectrumAnalysis1.setAutoExclusive(True)
        self.pbSpectrumAnalysis1.setObjectName("pbSpectrumAnalysis1")
        self.verticalLayout_4.addWidget(self.pbSpectrumAnalysis1)
        spacerItem = QtWidgets.QSpacerItem(20, 253, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem)
        self.verticalLayout_4.addStretch()

        self.gridLayout1.addWidget(self.icon_only_widget, 0, 0, 1, 1)

        # self.horizontalLayout_8.addWidget(self.icon_only_widget)
        self.icon_name_widget = QtWidgets.QWidget(self.centralwidget)
        self.icon_name_widget.setStyleSheet("""
            QWidget {
                background-color: rgba( 86, 101, 115, 0.5);
            }
            QPushButton {
                color: black;
                font: 14px 'Segoe UI';
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                text-align: left;
                transition: background-color 0.3s ease, color 0.3s ease;
            }
            QPushButton:hover {
                background-color: #F5F5F5;
                color: black;
            }
            QPushButton:checked {
                background-color: #F5F5F5;
                color: black;
                font-weight: bold;
                font: 14.5px;
            }
        """)
        self.icon_name_widget.setObjectName("icon_name_widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.icon_name_widget)
        self.verticalLayout_2.setContentsMargins(7, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout.setContentsMargins(9, 9, 9, 9)
        self.verticalLayout.setSpacing(22)
        self.verticalLayout.setObjectName("verticalLayout")

        # Add MediMetrics label and Menu button inside icon_name_widget
        self.horizontalLayoutForMediMetrics = QtWidgets.QHBoxLayout()
        self.horizontalLayoutForMediMetrics.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayoutForMediMetrics.setSpacing(5)

        # Add Menu Button (pbMenu) beside "MediMetrics"
        self.pbMenuIconName = QtWidgets.QPushButton(self.icon_name_widget)
        self.pbMenuIconName.setFont(font)
        self.pbMenuIconName.setText("")
        self.pbMenuIconName.setStyleSheet("""background-color: none; text-align:center; 
                border-radius: 5px;""")
        self.pbMenuIconName.setIcon(icon4)  # Use the same menu icon
        self.pbMenuIconName.setChecked(False)  # Default unchecked state
        self.pbMenuIconName.setCheckable(True)
        self.pbMenuIconName.setMaximumSize(QtCore.QSize(50, 50))
        self.pbMenuIconName.setObjectName("pbMenuIconName")

        # Add Logo (QLabel) beside "MediMetrics"
        self.logoLabel = QtWidgets.QLabel(self.icon_name_widget)
        self.logoLabel.setStyleSheet("background-color: none;")
        self.logoLabel.setFixedSize(50, 50)  # Adjust size as needed
        self.logoLabel.setAlignment(QtCore.Qt.AlignCenter)
        logo_pixmap = QtGui.QPixmap("icons8-patient-compte-gouttes-64.png").scaled(
            50, 50, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation
        )
        self.logoLabel.setPixmap(logo_pixmap)

        # Add MediMetrics label inside icon_name_widget
        self.mediMetricsLabel = QtWidgets.QLabel(self.icon_name_widget)
        self.mediMetricsLabel.setText("MediMetrics")
        self.mediMetricsLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.mediMetricsLabel.setStyleSheet("background-color: none; font: italic 13pt; color: black;")
        self.mediMetricsLabel.setVisible(False)  # Initially hidden

        # Add widgets to the horizontal layout
        self.horizontalLayoutForMediMetrics.addWidget(self.logoLabel)  # Add the logo first
        self.horizontalLayoutForMediMetrics.addWidget(self.mediMetricsLabel)
        self.horizontalLayoutForMediMetrics.addWidget(self.pbMenuIconName)

        # Insert the layout at the top of the icon_name_widget
        self.verticalLayout.insertLayout(0, self.horizontalLayoutForMediMetrics)


        self.pbDataManagement2 = QtWidgets.QPushButton(self.icon_name_widget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pbDataManagement2.setFont(font)
        self.pbDataManagement2.setIcon(icon)
        self.pbDataManagement2.setCheckable(True)
        self.pbDataManagement2.setAutoExclusive(True)
        self.pbDataManagement2.setObjectName("pbDataManagement2")
        self.verticalLayout.addWidget(self.pbDataManagement2)
        self.pbDataAnalysis2 = QtWidgets.QPushButton(self.icon_name_widget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pbDataAnalysis2.setFont(font)
        self.pbDataAnalysis2.setIcon(icon1)
        self.pbDataAnalysis2.setCheckable(True)
        self.pbDataAnalysis2.setAutoExclusive(True)
        self.pbDataAnalysis2.setObjectName("pbDataAnalysis2")
        self.verticalLayout.addWidget(self.pbDataAnalysis2)
        self.pbImageProcessing2 = QtWidgets.QPushButton(self.icon_name_widget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pbImageProcessing2.setFont(font)
        self.pbImageProcessing2.setIcon(icon3)
        self.pbImageProcessing2.setCheckable(True)
        self.pbImageProcessing2.setAutoExclusive(True)
        self.pbImageProcessing2.setObjectName("pbImageProcessing2")
        self.verticalLayout.addWidget(self.pbImageProcessing2)

        self.pbVideoProcessing2 = QtWidgets.QPushButton(self.icon_name_widget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pbVideoProcessing2.setFont(font)
        self.pbVideoProcessing2.setIcon(icon5)
        self.pbVideoProcessing2.setCheckable(True)
        self.pbVideoProcessing2.setAutoExclusive(True)
        self.pbVideoProcessing2.setObjectName("pbVideoProcessing2")
        self.verticalLayout.addWidget(self.pbVideoProcessing2)

        self.pbSpectrumAnalysis2 = QtWidgets.QPushButton(self.icon_name_widget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pbSpectrumAnalysis2.setFont(font)
        self.pbSpectrumAnalysis2.setIcon(icon2)
        self.pbSpectrumAnalysis2.setCheckable(True)
        self.pbSpectrumAnalysis2.setAutoExclusive(True)
        self.pbSpectrumAnalysis2.setObjectName("pbSpectrumAnalysis2")
        self.verticalLayout.addWidget(self.pbSpectrumAnalysis2)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        spacerItem1 = QtWidgets.QSpacerItem(20, 253, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem1)


        self.gridLayout1.addWidget(self.icon_name_widget, 0, 1, 1, 1)

        # self.horizontalLayout_8.addWidget(self.icon_name_widget)
        self.main_menu = QtWidgets.QWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.main_menu.sizePolicy().hasHeightForWidth())
        self.main_menu.setSizePolicy(sizePolicy)
        self.main_menu.setObjectName("main_menu")
        self.verticalLayout_26 = QtWidgets.QVBoxLayout(self.main_menu)
        self.verticalLayout_26.setContentsMargins(-1, 0, 0, 0)
        self.verticalLayout_26.setObjectName("verticalLayout_26")
        self.verticalLayout_22 = QtWidgets.QVBoxLayout()
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        self.verticalLayout_26.addLayout(self.verticalLayout_22)
        self.widget = QtWidgets.QWidget(self.main_menu)
        self.widget.setObjectName("widget")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")


        spacerItem2 = QtWidgets.QSpacerItem(218, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.ECGlabel = QtWidgets.QLabel(self.widget)
        self.ECGlabel.setStyleSheet("font: 15pt \"MS Shell Dlg 2\";")
        self.ECGlabel.setAlignment(QtCore.Qt.AlignCenter)
        self.ECGlabel.setObjectName("ECGlabel")
        self.horizontalLayout.addWidget(self.ECGlabel)
        spacerItem3 = QtWidgets.QSpacerItem(98, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem3)
        self.horizontalLayout_4.addLayout(self.horizontalLayout)
        self.verticalLayout_26.addWidget(self.widget)
        self.stackedWidget = QtWidgets.QStackedWidget(self.main_menu)
        self.stackedWidget.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stackedWidget.sizePolicy().hasHeightForWidth())
        self.stackedWidget.setSizePolicy(sizePolicy)
        self.stackedWidget.setStyleSheet("")
        self.stackedWidget.setObjectName("stackedWidget")


        self.ManageData_6 = QtWidgets.QWidget()
        self.ManageData_6.setObjectName("ManageData_6")
        self.dataLayout = QtWidgets.QVBoxLayout(self.ManageData_6)

        # Title Label
        self.titleLabel = QtWidgets.QLabel("Data Management")
        self.titleLabel.setAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        self.titleLabel.setFont(font)
        self.dataLayout.addWidget(self.titleLabel)

        # Data Source Section
        self.dataSourceGroupBox = QtWidgets.QGroupBox("Data Source")
        self.dataSourceLayout = QtWidgets.QHBoxLayout(self.dataSourceGroupBox)

        self.loadCSVButton = QtWidgets.QPushButton("Load CSV")
        self.loadCSVButton.setToolTip("Load patient data from a CSV file.")
        self.dataSourceLayout.addWidget(self.loadCSVButton)

        self.connectDBButton = QtWidgets.QPushButton("Connect to Database")
        self.connectDBButton.setToolTip("Connect to a database (SQLite, MySQL, PostgreSQL).")
        self.dataSourceLayout.addWidget(self.connectDBButton)

        # Add Insert Row Button in Data Source Group
        self.insertRowButton = QtWidgets.QPushButton("Enter Data")
        self.insertRowButton.setToolTip("Add an empty row to the table for manual entry.")
        self.dataSourceLayout.addWidget(self.insertRowButton)

        self.dataLayout.addWidget(self.dataSourceGroupBox)

        # Database Operations
        self.dbOperationsGroupBox = QtWidgets.QGroupBox("Database Operations")
        self.dbOperationsLayout = QtWidgets.QGridLayout(self.dbOperationsGroupBox)

        # Insert Data Button
        self.insertDataButton = QtWidgets.QPushButton("Save to Database")
        self.insertDataButton.setToolTip("Insert new patient data into the database.")
        self.dbOperationsLayout.addWidget(self.insertDataButton, 0, 0)

        # Retrieve Data Button
        self.retrieveDataButton = QtWidgets.QPushButton("Filter Data")
        self.retrieveDataButton.setToolTip("Filter data from the database.")
        self.dbOperationsLayout.addWidget(self.retrieveDataButton, 0, 1)

        # Update Data Button
        self.updateDataButton = QtWidgets.QPushButton("Update Data")
        self.updateDataButton.setToolTip("Update existing records in the database.")
        self.dbOperationsLayout.addWidget(self.updateDataButton, 1, 0)

        # Delete Data Button
        self.deleteDataButton = QtWidgets.QPushButton("Delete Data")
        self.deleteDataButton.setToolTip("Delete selected records from the database.")
        self.dbOperationsLayout.addWidget(self.deleteDataButton, 1, 1)

        self.dataLayout.addWidget(self.dbOperationsGroupBox)

        # Table View
        self.tableGroupBox = QtWidgets.QGroupBox("Loaded or Retrieved Data")
        self.tableLayout = QtWidgets.QVBoxLayout(self.tableGroupBox)

        self.dataTable = QtWidgets.QTableWidget()
        self.dataTable.setColumnCount(26)  # Total number of columns in your dataset
        self.dataTable.setHorizontalHeaderLabels([
            "Patient ID", "Age", "Sex", "Cholesterol", "Blood Pressure", "Heart Rate", "Diabetes",
            "Family History", "Smoking", "Obesity", "Alcohol Consumption", "Exercise Hours Per Week",
            "Diet", "Previous Heart Problems", "Medication Use", "Stress Level",
            "Sedentary Hours Per Day", "Income", "BMI", "Triglycerides",
            "Physical Activity Days Per Week", "Sleep Hours Per Day", "Country", "Continent",
            "Hemisphere", "Heart Attack Risk"
        ])
        self.dataTable.setSortingEnabled(True)

        self.dataTable.horizontalHeader().setStretchLastSection(True)
        self.dataTable.verticalHeader().setVisible(False)
        self.dataTable.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.dataTable.setSelectionMode(QtWidgets.QTableView.SingleSelection)
        self.tableLayout.addWidget(self.dataTable)

        self.dataLayout.addWidget(self.tableGroupBox)

        # Add to Stacked Widget
        self.stackedWidget.addWidget(self.ManageData_6)

        # DATA ANALYSIS
        self.Data_6 = QtWidgets.QWidget()
        self.Data_6.setObjectName("Data_6")

        # Title Label
        self.label_title = QtWidgets.QLabel(self.Data_6)
        self.label_title.setObjectName("label_title")
        self.label_title.setText("Heart Dataset Analysis")
        self.label_title.setStyleSheet("font-size: 20px; font-weight: bold; text-align: center;")
        self.label_title.setAlignment(QtCore.Qt.AlignCenter)

        # Use a vertical layout to better manage the title and tab widget
        self.layout_analysis = QtWidgets.QVBoxLayout(self.Data_6)
        self.layout_analysis.setContentsMargins(10, 10, 10, 10)  # Reduce outer spacing
        self.layout_analysis.addWidget(self.label_title)

        # Tab Widget for Analysis
        self.tabWidget = QtWidgets.QTabWidget(self.Data_6)
        self.tabWidget.setObjectName("tabWidget")

        # Ensure the tabs expand to fill available space
        self.tabWidget.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        # Add Tabs
        self.tab_overview = QtWidgets.QWidget()
        self.tab_overview.setObjectName("tab_overview")
        self.layout_overview = QtWidgets.QVBoxLayout(self.tab_overview)
        self.tabWidget.addTab(self.tab_overview, "Overview")

        self.tab_correlation = QtWidgets.QWidget()
        self.tab_correlation.setObjectName("tab_correlation")
        self.layout_correlation = QtWidgets.QHBoxLayout(self.tab_correlation)
        # Dropdown for selecting columns
        self.correlation_dropdown = QtWidgets.QWidget(self.tab_correlation)
        self.checkbox_layout = QtWidgets.QVBoxLayout(self.correlation_dropdown)

        # # Add a spacer to push the dropdown and button down
        # spacer = QtWidgets.QSpacerItem(50, 100, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        # self.checkbox_layout.addItem(spacer)

        # Add a button to trigger plot updates
        # self.update_button = QtWidgets.QPushButton("Update Plot", self.correlation_dropdown)
        self.layout_correlation.addWidget(self.correlation_dropdown)
        # self.checkbox_layout.addWidget(self.update_button)
        self.correlation_dropdown.setFixedWidth(200)
        # self.update_button.setFixedWidth(200)


        # Web view for displaying the parallel categories plot
        # self.correlation_web_view = QWebEngineView(self.tab_correlation)
        # self.layout_correlation.addWidget(self.correlation_web_view)
        self.tabWidget.addTab(self.tab_correlation, "Correlation")

        # self.tab_stats = QtWidgets.QWidget()
        # self.tab_stats.setObjectName("tab_stats")
        # self.layout_stats = QtWidgets.QVBoxLayout(self.tab_stats)
        # self.tabWidget.addTab(self.tab_stats, "Statistics")

        self.sex_modeling = QtWidgets.QWidget()
        self.sex_modeling.setObjectName("sex_stats")
        self.layout_sex = QtWidgets.QVBoxLayout(self.sex_modeling)
        self.tabWidget.addTab(self.sex_modeling, "Gender")

        self.Smoking_modeling = QtWidgets.QWidget()
        self.Smoking_modeling.setObjectName("Smoking_stats")
        self.layout_Smoking = QtWidgets.QVBoxLayout(self.Smoking_modeling)
        self.tabWidget.addTab(self.Smoking_modeling, "Smoking")

        self.Family_modeling = QtWidgets.QWidget()
        self.Family_modeling.setObjectName("Family_stats")
        self.layout_Family = QtWidgets.QVBoxLayout(self.Family_modeling)
        self.tabWidget.addTab(self.Family_modeling, "Family History")


        self.tab_risk_factors = QtWidgets.QWidget()
        self.tab_risk_factors.setObjectName("tab_risk_factors")
        self.layout_risk_factors = QtWidgets.QVBoxLayout(self.tab_risk_factors)
        self.tabWidget.addTab(self.tab_risk_factors, "Risk Factors")

        from PyQt5.QtWidgets import QLabel, QVBoxLayout, QTextEdit, QFrame, QHBoxLayout
        from PyQt5.QtGui import QFont, QPixmap
        from PyQt5.QtCore import Qt

        self.tab_summary = QtWidgets.QWidget()
        self.tab_summary.setObjectName("tab_summary")
        self.layout_summary = QtWidgets.QVBoxLayout(self.tab_summary)

        # Add a title
        title_label = QLabel("Health Insights and Recommendations")
        title_label.setFont(QFont("Segoe UI", 16, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("color: #2E4053; margin-bottom: 20px;")

        # Add a divider line
        divider_line = QFrame()
        divider_line.setFrameShape(QFrame.HLine)
        divider_line.setFrameShadow(QFrame.Sunken)
        divider_line.setStyleSheet("color: #ABB2B9; margin: 10px 0;")

        # Key Findings Section with Icon
        key_findings_layout = QHBoxLayout()
        key_findings_layout.setAlignment(Qt.AlignCenter)
        key_findings_icon = QLabel()
        key_findings_icon.setPixmap(
            QPixmap("icons8-surveillance-externe-études-de-marché-flaticons-lineal-color-flat-icons-64.png").scaled(30, 30, Qt.KeepAspectRatio))  # Replace with your icon path
        key_findings_icon.setStyleSheet("margin-right: 10px;")
        key_findings_label = QLabel("Key Findings:")
        key_findings_label.setFont(QFont("Segoe UI", 14, QFont.Bold))
        key_findings_label.setStyleSheet("color: #34495E;")
        key_findings_layout.addWidget(key_findings_icon)
        key_findings_layout.addWidget(key_findings_label)

        key_findings_text = QTextEdit()
        key_findings_text.setReadOnly(True)
        key_findings_text.setText(
            "1. 59% of the patients are at risk of getting a heart attack.\n"
            "2. Cholesterol, family history of heart attack, alcohol consumption, diabetes, and BMI "
            "are correlated with heart attack risk.\n"
            "3. Smoking is a risk factor, but only 10% of patients smoke, contributing to low correlation.\n"
            "\n*These findings align with risk factors stated by the National Heart, Lung, and Blood Institute (NHLBI).*\n"
        )
        key_findings_text.setStyleSheet("font: 15px 'Segoe UI'; color: #2C3E50; background-color: #F8F9F9;")
        key_findings_text.setMinimumHeight(150)

        # Recommendations Section with Icon
        recommendations_layout = QHBoxLayout()
        recommendations_layout.setAlignment(Qt.AlignCenter)
        recommendations_icon = QLabel()
        recommendations_icon.setPixmap(
            QPixmap("icons8-case-à-cocher-vérifiée-64.png").scaled(30, 30, Qt.KeepAspectRatio))  # Replace with your icon path
        recommendations_icon.setStyleSheet("margin-right: 10px;")
        recommendations_label = QLabel("Recommendations:")
        recommendations_label.setFont(QFont("Segoe UI", 14, QFont.Bold))
        recommendations_label.setStyleSheet("color: #34495E;")
        recommendations_layout.addWidget(recommendations_icon)
        recommendations_layout.addWidget(recommendations_label)

        recommendations_text = QTextEdit()
        recommendations_text.setReadOnly(True)
        recommendations_text.setText(
            "1. Patients at risk should focus on maintaining healthy cholesterol and BMI levels.\n"
            "2. Incorporate a heart-healthy diet low in saturated fats and rich in vegetables and fruits.\n"
            "3. Increase physical activity to at least 150 minutes per week.\n"
            "4. Patients with diabetes should closely monitor their glucose levels.\n"
            "5. Educate patients on the benefits of reducing alcohol consumption.\n"
            "6. All patients with family history of heart attack should ensure they maintain a healthy lifestyle.\n"
        )
        recommendations_text.setStyleSheet("font: 15px 'Segoe UI'; color: #2C3E50; background-color: #F8F9F9;")
        recommendations_text.setMinimumHeight(120)

        # Add all widgets to the layout
        self.layout_summary.addWidget(title_label)
        self.layout_summary.addWidget(divider_line)
        self.layout_summary.addLayout(key_findings_layout)
        self.layout_summary.addWidget(key_findings_text)
        self.layout_summary.addLayout(recommendations_layout)
        self.layout_summary.addWidget(recommendations_text)
        self.tabWidget.addTab(self.tab_summary, "Summary")

        # self.tab_modeling = QtWidgets.QWidget()
        # self.tab_modeling.setObjectName("tab_modeling")
        # self.layout_modeling = QtWidgets.QVBoxLayout(self.tab_modeling)
        # self.tabWidget.addTab(self.tab_modeling, "Predictive Modeling")

        # Add the TabWidget to the vertical layout
        self.layout_analysis.addWidget(self.tabWidget)

        # Add self.Data_6 to the stacked widget
        self.stackedWidget.addWidget(self.Data_6)

        # SIGNAL PROCESSING
        self.Signal_6 = QtWidgets.QWidget()
        self.Signal_6.setObjectName("Signal_6")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.Signal_6)
        self.gridLayout_7.setContentsMargins(0, 0, -1, 0)
        self.gridLayout_7.setObjectName("gridLayout_7")


        # Adding a title to the main layout
        self.titleLabel = QtWidgets.QLabel("ECG Data Processing")
        self.titleLabel.setAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        self.titleLabel.setFont(font)

        self.gridLayout_7.addWidget(self.titleLabel, 0, 0, 1, 2)  # Spans two columns

        self.settingsLabel = QtWidgets.QLabel("Signal Processing Controls")
        self.settingsLabel.setAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.settingsLabel.setFont(font)

        self.gridLayout_7.addWidget(self.settingsLabel, 0, 0, 1, 1)  # Spans two columns

        # Settings Group Box
        self.settingsGroupBox = QtWidgets.QGroupBox("", self.Signal_6)
        self.settingsGroupBox.setStyleSheet("font-size: 10pt;")
        self.settingsLayout = QtWidgets.QVBoxLayout(self.settingsGroupBox)

        # Load Signal Button
        self.LoadBtnsignal = QtWidgets.QPushButton("Load Signal")
        # self.LoadBtnsignal.setStyleSheet("background-color: #1F95EF; color: white; padding: 5px; border-radius: 5px;")
        self.LoadBtnsignal.setToolTip("Click to load ECG signal data.")
        self.settingsLayout.addWidget(self.LoadBtnsignal)

        # Add a spacer after the "Load Signal" button
        spacer_after_load_btn = QtWidgets.QSpacerItem(
            20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed
        )
        self.settingsLayout.addItem(spacer_after_load_btn)  # Spacer to create space

        # Time Navigation
        self.timeLayout = QtWidgets.QHBoxLayout()
        self.label_3 = QtWidgets.QLabel("Go to:")
        self.label_3.setObjectName("label_3")
        self.timeInput = QtWidgets.QLineEdit()
        self.timeInput.setObjectName("timeInput")
        self.updateTimeButton = QtWidgets.QPushButton()
        self.updateTimeButton.setIcon(QtGui.QIcon(":/icons8-lien-externe-32.png"))
        self.updateTimeButton.setObjectName("updateTimeButton")
        self.updateTimeButton.setToolTip("Update time range")
        self.timeLayout.addWidget(self.label_3)
        self.timeLayout.addWidget(self.timeInput)
        self.timeLayout.addWidget(self.updateTimeButton)
        self.settingsLayout.addLayout(self.timeLayout)

        # Add a spacer after the "Load Signal" button
        spacer_after_time = QtWidgets.QSpacerItem(
            20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed
        )
        self.settingsLayout.addItem(spacer_after_time)  # Spacer to create space
        # Window Duration Slider
        self.windowDurationLayout = QtWidgets.QVBoxLayout()
        self.windowDurationLabel = QtWidgets.QLabel("Window Duration: 5 seconds")
        self.windowDurationLabel.setObjectName("windowDurationLabel")
        self.windowDurationSlider = QtWidgets.QSlider(QtCore.Qt.Horizontal)
        self.windowDurationSlider.setRange(5, 60)
        self.windowDurationSlider.setSingleStep(5)
        self.windowDurationSlider.setValue(5)
        self.windowDurationSlider.setObjectName("windowDurationSlider")
        self.windowDurationSlider.setToolTip("Adjust window duration for analysis")
        self.windowDurationLayout.addWidget(self.windowDurationLabel)
        self.windowDurationLayout.addWidget(self.windowDurationSlider)
        self.settingsLayout.addLayout(self.windowDurationLayout)

        # Add a spacer after the "Load Signal" button
        spacer_after_slider = QtWidgets.QSpacerItem(
            20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed
        )
        self.settingsLayout.addItem(spacer_after_slider)  # Spacer to create space

        # FFT Parameters
        self.fftGroup = QtWidgets.QGroupBox("FFT Parameters")
        self.fftLayout = QtWidgets.QHBoxLayout(self.fftGroup)

        self.label_50 = QtWidgets.QLabel("Norm:")
        self.NormcomboBox = QtWidgets.QComboBox()
        self.NormcomboBox.addItems(["forward", "backward", "ortho"])
        self.NormcomboBox.setToolTip("Select the norm for the Fourier Transform.")


        self.fftLayout.addWidget(self.label_50)
        self.fftLayout.addWidget(self.NormcomboBox)
        self.settingsLayout.addWidget(self.fftGroup)

        # Add Settings Group Box to Main Layout
        self.gridLayout_7.addWidget(self.settingsGroupBox, 1, 0)
        # self.gridLayout_7.addWidget(self.settingsLayout,1,0)


        # Footer Label
        self.footerLabel = QtWidgets.QLabel("Developed by Godsfavour | Version 1.0")
        self.footerLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.footerLabel.setStyleSheet("color: gray; font-size: 10pt;")
        self.gridLayout_7.addWidget(self.footerLabel, 3, 0, 1, 2)  # Bottom of the layout
        # self.settingsGroupBox.setFlat(True)  # Makes it collapsible
        self.settingsLayout.addStretch(1)  # Adds space for better compression
        self.settingsGroupBox.setFixedWidth(200)  # Adjust width as needed

        # Add a spacer after the "Load Signal" button
        spacer_after_fft = QtWidgets.QSpacerItem(
            20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed
        )
        self.settingsLayout.addItem(spacer_after_fft)  # Spacer to create space

        # Periodogram Parameters
        self.periodogramGroup = QtWidgets.QGroupBox("Periodogram Parameters")
        self.periodogramLayout = QtWidgets.QVBoxLayout(self.periodogramGroup)

        # Scaling Combo Box
        self.scalingComboBoxLayout = QtWidgets.QHBoxLayout()
        self.label_53 = QtWidgets.QLabel("Scaling:")
        self.label_53.setObjectName("label_53")
        self.ScalingcomboBox = QtWidgets.QComboBox()
        self.ScalingcomboBox.setObjectName("ScalingcomboBox")
        self.ScalingcomboBox.addItems(["density", "spectrum"])
        self.ScalingcomboBox.setToolTip("Select scaling type for periodogram")
        self.scalingComboBoxLayout.addWidget(self.label_53)
        self.scalingComboBoxLayout.addWidget(self.ScalingcomboBox)

        # Add Scaling Layout to Periodogram Layout
        self.periodogramLayout.addLayout(self.scalingComboBoxLayout)

        # Window Combo Box
        self.windowComboBoxLayout = QtWidgets.QHBoxLayout()
        self.label_52 = QtWidgets.QLabel("Window:")
        self.label_52.setObjectName("label_52")
        self.WindowcomboBox = QtWidgets.QComboBox()
        self.WindowcomboBox.setObjectName("WindowcomboBox")
        self.WindowcomboBox.addItems(["boxcar", "hann", "hamming"])
        self.WindowcomboBox.setToolTip("Select window type for periodogram")
        self.windowComboBoxLayout.addWidget(self.label_52)
        self.windowComboBoxLayout.addWidget(self.WindowcomboBox)

        # Add Window Layout to Periodogram Layout
        self.periodogramLayout.addLayout(self.windowComboBoxLayout)

        # Add Periodogram Group to Settings Layout
        self.settingsLayout.addWidget(self.periodogramGroup)
        spacerItem8 = QtWidgets.QSpacerItem(20, 238, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.settingsLayout.addItem(spacerItem8)
        self.settingsLayout.addStretch(1)
        # Right Panel (Graphs)
        self.graphsGroupBox = QtWidgets.QGroupBox("")
        self.graphsGroupBox.setStyleSheet("font-size: 12px; font-weight: bold;")
        self.graphsLayout = QtWidgets.QVBoxLayout(self.graphsGroupBox)

        self.mplwindow = QtWidgets.QFrame()
        self.mplwindow.setFrameShape(QtWidgets.QFrame.Box)
        self.mplwindow.setFrameShadow(QtWidgets.QFrame.Raised)
        self.mplwindow.setObjectName("mplwindow")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.mplwindow)
        self.graphsLayout.addWidget(self.mplwindow)

        # self.graphsLayout.addWidget(self.graphsGroupBox)
        # self.gridLayout_7.addWidget(self.mplwindow, 1, 1, 1, 1)

        # Add Navigation and Save Buttons beside the Plot
        self.plotButtonsLayout = QtWidgets.QHBoxLayout()

        # Previous Button
        self.prevBtn = QtWidgets.QPushButton("Previous")
        self.prevBtn.setToolTip("Show the previous plot")
        self.plotButtonsLayout.addWidget(self.prevBtn)

        # Next Button
        self.nextBtn = QtWidgets.QPushButton("Next")
        self.nextBtn.setToolTip("Show the next plot")
        self.plotButtonsLayout.addWidget(self.nextBtn)

        # Save Button
        self.savePlotBtn = QtWidgets.QPushButton("Save Plot")
        self.savePlotBtn.setToolTip("Save the currently displayed plot")
        self.plotButtonsLayout.addWidget(self.savePlotBtn)

        # Add the buttons layout to the graphs layout
        self.graphsLayout.addLayout(self.plotButtonsLayout)

        # Add the graphs group box to the main grid layout
        self.gridLayout_7.addWidget(self.graphsGroupBox, 1, 1, 1, 1)


        # Results Table
        self.SignaltableGroup = QtWidgets.QGroupBox("Results Table")
        self.tableLayout = QtWidgets.QVBoxLayout(self.SignaltableGroup)
        self.SignalresultsTable = QtWidgets.QTableWidget(self.SignaltableGroup)
        self.SignalresultsTable.setColumnCount(2)
        self.SignalresultsTable.setHorizontalHeaderLabels(["Metric", "Value"])
        self.SignalresultsTable.horizontalHeader().setStretchLastSection(True)
        self.SignalresultsTable.verticalHeader().setVisible(False)
        self.SignalresultsTable.setFixedHeight(100)
        self.SignalresultsTable.setColumnWidth(0, 450)  # Set the width of the first column (in pixels)
        self.graphsLayout.addWidget(self.SignalresultsTable)

        # Buttons for Exporting and Clearing Results
        self.resultsButtonsLayout = QtWidgets.QHBoxLayout()
        self.graphsLayout.addLayout(self.resultsButtonsLayout)

        self.btnCalculateMetrics = QtWidgets.QPushButton("Calculate Metrics")
        self.resultsButtonsLayout.addWidget(self.btnCalculateMetrics)

        self.exportButton = QtWidgets.QPushButton("Export Metrics")
        self.resultsButtonsLayout.addWidget(self.exportButton)

        self.clearButton = QtWidgets.QPushButton("Clear Results")
        self.resultsButtonsLayout.addWidget(self.clearButton)

        self.settingsLayout.addWidget(self.settingsGroupBox)
        self.stackedWidget.addWidget(self.Signal_6)

        # IMAGE PROCESSING
        self.Image_6 = QtWidgets.QWidget()
        self.Image_6.setObjectName("Image_6")

        # Create the main layout for the Image_6 widget
        self.imageLayout = QtWidgets.QVBoxLayout(self.Image_6)

        # Title Label
        self.titleLabel = QtWidgets.QLabel("Image Processing")
        self.titleLabel.setAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        self.titleLabel.setFont(font)
        # self.titleLabel.setFixedHeight(30)  # Set a smaller fixed height for the title
        self.imageLayout.addWidget(self.titleLabel)


        # Create the horizontal layout for the rest of the widget
        self.image6Layout = QtWidgets.QHBoxLayout()

        # Segmentation Controls Panel
        self.segmentationControls = QtWidgets.QGroupBox("Image Processing Controls", self.Image_6)
        self.segmentationControlsLayout = QtWidgets.QVBoxLayout(self.segmentationControls)
        # self.segmentationControls.setMinimumHeight(500)  # Set a minimum height for controls
        # self.segmentationControls.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        ### Load Image Section ###
        self.loadImageGroup = QtWidgets.QGroupBox("Load Image")
        self.loadImageLayout = QtWidgets.QHBoxLayout(self.loadImageGroup)

        self.btnLoadImage = QtWidgets.QPushButton("Load Image", self.loadImageGroup)
        # self.btnWebcam = QtWidgets.QPushButton("Webcam", self.loadImageGroup)

        # self.btnLoadImage.setStyleSheet("background-color: #1F95EF; color: white; padding: 5px; border-radius: 5px;")

        self.loadImageLayout.addWidget(self.btnLoadImage)
        # self.loadImageLayout.addWidget(self.btnWebcam)

        self.segmentationControlsLayout.addWidget(self.loadImageGroup)

        # Grayscale and Thresholding Section
        self.grayscaleThresholdGroup = QtWidgets.QGroupBox("Intensity Adjustments")
        self.grayscaleThresholdLayout = QtWidgets.QHBoxLayout(self.grayscaleThresholdGroup)

        # Grayscale Conversion
        self.btnGrayscale = QtWidgets.QPushButton("Grayscale", self.grayscaleThresholdGroup)
        self.grayscaleThresholdLayout.addWidget(self.btnGrayscale)

        # Thresholding with User Input
        self.thresholdLayout = QtWidgets.QHBoxLayout()
        self.btnThreshold = QtWidgets.QPushButton("Apply Threshold")
        self.thresholdValueInput = QtWidgets.QSpinBox()
        self.thresholdValueInput.setRange(0, 255)
        self.thresholdValueInput.setValue(120)  # Default threshold value
        self.thresholdLayout.addWidget(QtWidgets.QLabel("Threshold Value:"))
        self.thresholdLayout.addWidget(self.thresholdValueInput)
        self.thresholdLayout.addWidget(self.btnThreshold)


        self.grayscaleThresholdLayout.addLayout(self.thresholdLayout)

        self.segmentationControlsLayout.addWidget(self.grayscaleThresholdGroup)


        ### Noise Reduction Group ###
        self.noiseReductionGroup = QtWidgets.QGroupBox("Noise Reduction / Sharpness")
        self.noiseReductionLayout = QtWidgets.QHBoxLayout(self.noiseReductionGroup)

        # Denoising
        self.btnDenoise = QtWidgets.QPushButton("Denoise")
        self.noiseReductionLayout.addWidget(self.btnDenoise)

        # Sharpening
        self.btnSharpen = QtWidgets.QPushButton("Sharpening")
        self.noiseReductionLayout.addWidget(self.btnSharpen)

        # Blurring
        self.blurValueInput = QtWidgets.QComboBox()
        self.blurValueInput.addItems(["3", "5", "7", "9", "11", "13", "15"])  # Only odd values
        # self.blurValueInput.setValue(5)  # Default threshold value
        self.noiseReductionLayout.addWidget(QtWidgets.QLabel("Kernel:"))
        self.btnBlur = QtWidgets.QPushButton("Gaussian Blur")
        self.noiseReductionLayout.addWidget(self.blurValueInput)
        self.noiseReductionLayout.addWidget(self.btnBlur)

        # # Thresholding with User Input
        # self.thresholdLayout = QtWidgets.QHBoxLayout()
        # self.btnThreshold = QtWidgets.QPushButton("Apply Threshold")
        # self.thresholdValueInput = QtWidgets.QSpinBox()
        # self.thresholdValueInput.setRange(0, 255)
        # self.thresholdValueInput.setValue(120)  # Default threshold value
        # self.thresholdLayout.addWidget(QtWidgets.QLabel("Threshold Value:"))
        # self.thresholdLayout.addWidget(self.thresholdValueInput)
        # self.thresholdLayout.addWidget(self.btnThreshold)
        #
        # self.grayscaleThresholdLayout.addLayout(self.thresholdLayout)

        self.segmentationControlsLayout.addWidget(self.noiseReductionGroup)

        # Edge Detection Section
        self.edgeDetectionGroup = QtWidgets.QGroupBox("Edge Detection / Boundary Extraction")
        self.edgeLayout = QtWidgets.QHBoxLayout(self.edgeDetectionGroup)

        self.btnEdgeDetection = QtWidgets.QPushButton("Canny Edge Detection", self.edgeDetectionGroup)
        self.edgeLayout.addWidget(self.btnEdgeDetection)

        self.btnBoundary = QtWidgets.QPushButton(" Extract Boundary", self.edgeDetectionGroup)
        self.edgeLayout.addWidget(self.btnBoundary)

        self.segmentationControlsLayout.addWidget(self.edgeDetectionGroup)

        ### Morphological Operations Section ###
        self.morphGroup = QtWidgets.QGroupBox("Morphological Operations")
        self.morphLayout = QtWidgets.QVBoxLayout(self.morphGroup)

        # Create a horizontal layout for Clear Borders and Fill Holes
        self.clearFillLayout = QtWidgets.QHBoxLayout()
        self.btnClearBorders = QtWidgets.QPushButton("Clear Borders")
        self.btnFillHoles = QtWidgets.QPushButton("Fill Holes")
        self.clearFillLayout.addWidget(self.btnClearBorders)
        self.clearFillLayout.addWidget(self.btnFillHoles)
        self.morphLayout.addLayout(self.clearFillLayout)

        # Create a horizontal layout for Erosion and Dilation
        self.erodeDilateLayout = QtWidgets.QHBoxLayout()
        self.btnErosion = QtWidgets.QPushButton("Erosion")
        self.btnDilation = QtWidgets.QPushButton("Dilation")
        self.erodeDilateLayout.addWidget(self.btnErosion)
        self.erodeDilateLayout.addWidget(self.btnDilation)
        self.morphLayout.addLayout(self.erodeDilateLayout)

        self.smallObjectsLayout = QtWidgets.QHBoxLayout()
        # self.btnRemoveSmallObjects = QtWidgets.QPushButton("Remove Small Objects", self.morphGroup)

        self.btnRemoveSmallObjects = QtWidgets.QPushButton("Remove Small Objects")
        self.minSizeInput = QtWidgets.QSpinBox()
        self.minSizeInput.setRange(1, 100000)
        self.minSizeInput.setValue(500)  # Default min size
        self.smallObjectsLayout.addWidget(QtWidgets.QLabel("Min Size:"))
        self.smallObjectsLayout.addWidget(self.minSizeInput)
        self.smallObjectsLayout.addWidget(self.btnRemoveSmallObjects)
        self.morphLayout.addLayout(self.smallObjectsLayout)


        self.segmentationControlsLayout.addWidget(self.grayscaleThresholdGroup)

        # self.btnFillHoles = QtWidgets.QPushButton("Fill Holes")
        # self.morphLayout.addWidget(self.btnFillHoles)
        #
        # self.btnErosion = QtWidgets.QPushButton("Erosion", self.morphGroup)
        # self.morphLayout.addWidget(self.btnErosion)
        #
        # self.btnDilation = QtWidgets.QPushButton("Dilation", self.morphGroup)
        # self.morphLayout.addWidget(self.btnDilation)

        self.segmentationControlsLayout.addWidget(self.morphGroup)

        ### Region Properties Section ###
        self.regionPropsGroup = QtWidgets.QGroupBox("Region Properties")
        self.regionPropsLayout = QtWidgets.QHBoxLayout(self.regionPropsGroup)

        self.labelRegionProps = QtWidgets.QLabel("Select Properties:")
        self.regionPropsLayout.addWidget(self.labelRegionProps)

        self.comboRegionProps = QtWidgets.QComboBox(self.regionPropsGroup)
        self.comboRegionProps.addItems(["Surface Area", "Perimeter", "Eccentricity", "All"])
        self.regionPropsLayout.addWidget(self.comboRegionProps)

        self.btnCalculateProps = QtWidgets.QPushButton("Calculate")
        self.regionPropsLayout.addWidget(self.btnCalculateProps)

        self.segmentationControlsLayout.addWidget(self.regionPropsGroup)

        self.segmentationControls.setFixedWidth(350)  # Adjust width as needed

        # Add controls to the main layout
        # self.image6Layout.addWidget(self.segmentationControls, stretch=3)
        self.image6Layout.addWidget(self.segmentationControls)


        ### Right Panel: Image Display and Results Table ###
        self.rightPanel = QtWidgets.QVBoxLayout()  # Vertical layout for images and table

        # Image Display Section
        self.imageDisplayGroup = QtWidgets.QGroupBox("Image Display", self.Image_6)
        self.imageDisplayLayout = QtWidgets.QHBoxLayout(self.imageDisplayGroup)
        # self.imageDisplayGroup.setMinimumHeight(500)  # Set a minimum height for display
        # self.imageDisplayGroup.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        # Original Image Display
        self.labelOriginalImage = QtWidgets.QLabel("Original Image")
        self.labelOriginalImage.setAlignment(QtCore.Qt.AlignCenter)
        # self.labelOriginalImage.setFrameShape(QtWidgets.QFrame.Box)
        # self.labelOriginalImage.setSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        self.labelOriginalImage.setMinimumSize(300, 300)
        self.imageDisplayLayout.addWidget(self.labelOriginalImage)

        # Processed Image Display
        self.labelProcessedImage = QtWidgets.QLabel("Processed Image")
        self.labelProcessedImage.setAlignment(QtCore.Qt.AlignCenter)
        # self.labelProcessedImage.setFrameShape(QtWidgets.QFrame.Box)
        # self.labelProcessedImage.setSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        self.labelProcessedImage.setMinimumSize(300, 300)
        self.imageDisplayLayout.addWidget(self.labelProcessedImage)


        self.rightPanel.addWidget(self.imageDisplayGroup)

        # Add displays to the main layout
        # self.image6Layout.addWidget(self.imageDisplayGroup)

        ### Results Table Section (Now below the Image Display) ###
        self.tableGroup = QtWidgets.QGroupBox("Results Table", self.Image_6)
        self.tableLayout = QtWidgets.QVBoxLayout(self.tableGroup)

        self.resultTable = QtWidgets.QTableWidget(self.tableGroup)
        self.resultTable.setColumnCount(4)  # Adjust columns for properties dynamically
        self.resultTable.setHorizontalHeaderLabels(["Object ID", "Area", "Perimeter", "Eccentricity"])
        self.tableLayout.addWidget(self.resultTable)
        self.tableGroup.setFixedHeight(200)

        # Add the results table below the image display
        self.rightPanel.addWidget(self.tableGroup)        # Set layout for Image_6

        # Export Button
        self.btnExportResults = QtWidgets.QPushButton("Export Results", self.tableGroup)
        self.btnExportResults.setToolTip("Export the table data")
        self.tableLayout.addWidget(self.btnExportResults)

        # Add the right panel to the main layout
        # self.image6Layout.addLayout(self.rightPanel, stretch=3)
        self.image6Layout.addLayout(self.rightPanel)

        self.Image_6.setLayout(self.image6Layout)
        # Additional Widgets for Clear, Undo, and Redo
        self.actionGroup = QtWidgets.QGroupBox("Actions")
        self.actionLayout = QtWidgets.QHBoxLayout(self.actionGroup)

        # Clear Display Button
        self.btnClearDisplay = QtWidgets.QPushButton("Clear")
        self.btnClearDisplay.setToolTip("Clear the images and results table")
        self.actionLayout.addWidget(self.btnClearDisplay)

        # Undo Button
        self.btnUndo = QtWidgets.QPushButton("Undo")
        self.btnUndo.setToolTip("Revert to the previous operation")
        self.actionLayout.addWidget(self.btnUndo)

        # Redo Button
        self.btnRedo = QtWidgets.QPushButton("Redo")
        self.btnRedo.setToolTip("Redo the last undone operation")
        self.actionLayout.addWidget(self.btnRedo)

        # Save Image Button
        self.btnSaveImage = QtWidgets.QPushButton("Save Image")
        self.btnSaveImage.setToolTip("Save the processed image")
        self.actionLayout.addWidget(self.btnSaveImage)

        self.segmentationControlsLayout.addWidget(self.actionGroup)
        self.imageLayout.addLayout(self.image6Layout)
        self.stackedWidget.addWidget(self.Image_6)

        self.Video_6 = QtWidgets.QWidget()
        self.Video_6.setObjectName("Video_6")

        # Main Layout for Video Processing Widget
        self.videoLayout = QtWidgets.QVBoxLayout(self.Video_6)

        # Title Header (Compact)
        self.titleLabel = QtWidgets.QLabel("Video Processing")
        self.titleLabel.setAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(14)  # Reduced size
        font.setBold(True)
        self.titleLabel.setFont(font)
        self.videoLayout.addWidget(self.titleLabel)

        # Controls and Video Layouts
        self.controlsAndVideoLayout = QtWidgets.QGridLayout()

        # Video Processing Controls Panel
        self.videoControls = QtWidgets.QGroupBox("Controls")
        self.videoControlsLayout = QtWidgets.QGridLayout(self.videoControls)

        # Load Video Controls
        self.btnLoadVideo = QtWidgets.QPushButton("Load Video")
        self.btnPlayVideo = QtWidgets.QPushButton("Play")
        self.btnPauseVideo = QtWidgets.QPushButton("Pause")
        self.btnStopVideo = QtWidgets.QPushButton("Stop")

        self.videoControlsLayout.addWidget(self.btnLoadVideo, 0, 0, 1, 1)
        self.videoControlsLayout.addWidget(self.btnPlayVideo, 0, 1, 1, 1)
        self.videoControlsLayout.addWidget(self.btnPauseVideo, 0, 2, 1, 1)
        self.videoControlsLayout.addWidget(self.btnStopVideo, 0, 3, 1, 1)

        # Grayscale and Thresholding Section

        # # Thresholding with User Input
        # self.thresholdLayout = QtWidgets.QHBoxLayout()
        # self.btnThreshold = QtWidgets.QPushButton("Apply Threshold")
        # self.thresholdValueInput = QtWidgets.QSpinBox()
        # self.thresholdValueInput.setRange(0, 255)
        # self.thresholdValueInput.setValue(120)  # Default threshold value
        # self.thresholdLayout.addWidget(QtWidgets.QLabel("Threshold Value:"))
        # self.thresholdLayout.addWidget(self.thresholdValueInput)
        # self.thresholdLayout.addWidget(self.btnThreshold)
        #
        # self.grayscaleThresholdLayout.addLayout(self.thresholdLayout)
        #
        # self.segmentationControlsLayout.addWidget(self.grayscaleThresholdGroup)

        self.btnvideoGrayscale = QtWidgets.QPushButton("Convert to Grayscale")
        self.videothresholdLayout = QtWidgets.QHBoxLayout()
        self.btnvideoThreshold = QtWidgets.QPushButton("Apply Thresholding")
        self.thresholdVideoInput = QtWidgets.QSpinBox()
        self.thresholdVideoInput.setRange(0, 255)
        self.thresholdVideoInput.setValue(128)  # Default threshold value
        self.videothresholdLayout.addWidget(QtWidgets.QLabel("Threshold Value:"))
        self.videothresholdLayout.addWidget(self.thresholdVideoInput)
        self.videothresholdLayout.addWidget(self.btnvideoThreshold)
        self.videoControlsLayout.addWidget(self.btnvideoGrayscale, 1, 0, 1, 2)
        self.videoControlsLayout.addLayout(self.videothresholdLayout, 1, 2, 1, 2)

        # Edge Detection Section
        self.btnvideoEdgeDetection = QtWidgets.QPushButton("Apply Edge Detection")
        self.videoControlsLayout.addWidget(self.btnvideoEdgeDetection, 2, 0, 1, 2)

        # Channel Visualization Section
        self.btnVisualizeChannels = QtWidgets.QPushButton("View Channels (RGB)")
        self.videoControlsLayout.addWidget(self.btnVisualizeChannels, 2, 2, 1, 2)

        # Save and Clear Buttons
        self.btnSaveVideo = QtWidgets.QPushButton("Save Video")
        self.btnClearvideoDisplay = QtWidgets.QPushButton("Clear Display")

        self.videoControlsLayout.addWidget(self.btnSaveVideo, 3, 0, 1, 2)
        self.videoControlsLayout.addWidget(self.btnClearvideoDisplay, 3, 2, 1, 2)

        # Add Controls to the Main Grid Layout
        self.controlsAndVideoLayout.addWidget(self.videoControls, 0, 0, 1, 2)

        # Video Display Section
        self.videoDisplayGroup = QtWidgets.QGroupBox("Video Display")
        self.videoDisplayLayout = QtWidgets.QHBoxLayout(self.videoDisplayGroup)

        # Original Video Display
        self.labelOriginalVideo = QtWidgets.QLabel("Original Video")
        self.labelOriginalVideo.setAlignment(QtCore.Qt.AlignCenter)
        self.labelOriginalVideo.setFrameShape(QtWidgets.QFrame.Box)
        self.labelOriginalVideo.setMinimumSize(600, 500)

        # Processed Video Display
        self.labelProcessedVideo = QtWidgets.QLabel("Processed Video")
        self.labelProcessedVideo.setAlignment(QtCore.Qt.AlignCenter)
        self.labelProcessedVideo.setFrameShape(QtWidgets.QFrame.Box)
        self.labelProcessedVideo.setMinimumSize(600, 500)

        self.videoDisplayLayout.addWidget(self.labelOriginalVideo)
        self.videoDisplayLayout.addWidget(self.labelProcessedVideo)

        # Add Video Display to the Main Grid Layout
        self.controlsAndVideoLayout.addWidget(self.videoDisplayGroup, 1, 0, 1, 2)

        # Add to Main Layout
        self.videoLayout.addLayout(self.controlsAndVideoLayout)

        # Add to Stacked Widget
        self.stackedWidget.addWidget(self.Video_6)

        self.verticalLayout_26.addWidget(self.stackedWidget)

        self.gridLayout1.addWidget(self.main_menu, 0, 2, 1, 1)

        # self.horizontalLayout_8.addWidget(self.main_menu)
        self.verticalLayout_9.addLayout(self.gridLayout1)

        # self.verticalLayout_9.addLayout(self.horizontalLayout_8)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 20))
        self.menubar.setObjectName("menubar")
        self.menubar.setStyleSheet("background-color: rgba( 86, 101, 115, 0.5)")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.statusbar.setStyleSheet("background-color: rgba( 86, 101, 115, 0.5); border-top: 1px solid gray")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        self.tabWidget.setCurrentIndex(0)
        self.pbDataManagement1.toggled['bool'].connect(self.pbDataManagement2.setChecked) # type: ignore
        self.pbDataAnalysis1.toggled['bool'].connect(self.pbDataAnalysis2.setChecked) # type: ignore
        self.pbImageProcessing1.toggled['bool'].connect(self.pbImageProcessing2.setChecked) # type: ignore
        self.pbImageProcessing2.toggled['bool'].connect(self.pbImageProcessing1.setChecked) # type: ignore
        self.pbVideoProcessing1.toggled['bool'].connect(self.pbVideoProcessing2.setChecked)  # type: ignore
        self.pbVideoProcessing2.toggled['bool'].connect(self.pbVideoProcessing1.setChecked)  # type: ignore
        self.pbSpectrumAnalysis1.toggled['bool'].connect(self.pbSpectrumAnalysis2.setChecked) # type: ignore
        self.pbDataAnalysis2.toggled['bool'].connect(self.pbDataAnalysis1.setChecked) # type: ignore
        self.pbSpectrumAnalysis2.toggled['bool'].connect(self.pbSpectrumAnalysis1.setChecked) # type: ignore
        self.pbDataManagement2.toggled['bool'].connect(self.pbDataManagement1.setChecked) # type: ignore
        self.pbMenu.toggled['bool'].connect(self.icon_name_widget.setVisible) # type: ignore
        self.pbMenu.toggled['bool'].connect(self.icon_only_widget.setHidden) # type: ignore
        self.pbMenuIconName.toggled['bool'].connect(self.icon_name_widget.setHidden)  # type: ignore
        self.pbMenuIconName.toggled['bool'].connect(self.icon_only_widget.setVisible)  # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def getFilterInputDialog(self):
            # Create a dialog to get filter inputs
            dialog = QtWidgets.QDialog()
            dialog.setWindowTitle("Filter Data")
            dialog.setFixedSize(300, 150)

            # Filter Field Label and ComboBox
            fieldLabel = QtWidgets.QLabel("Filter Field:", dialog)
            fieldLabel.setGeometry(20, 20, 100, 30)

            filterCriteria = QtWidgets.QComboBox(dialog)
            filterCriteria.setGeometry(120, 20, 150, 30)
            filterCriteria.addItems([ "All Data",  # Option to retrieve all records
                    "PatientID", "Age", "Sex", "Cholesterol", "BloodPressure", "HeartRate",
                    "Diabetes", "FamilyHistory", "Smoking",
                "Obesity", "AlcoholConsumption", "ExerciseHoursPerWeek", "Diet", "PreviousHeartProblems",
                "MedicationUse", "StressLevel", "SedentaryHoursPerDay", "Income", "BMI", "Triglycerides",
                "PhysicalActivityDaysPerWeek", "SleepHoursPerDay", "Country", "Continent", "Hemisphere", "HeartAttackRisk"
            ])

            # Filter Value Label and Input
            valueLabel = QtWidgets.QLabel("Filter Value:", dialog)
            valueLabel.setGeometry(20, 60, 100, 30)

            filterField = QtWidgets.QLineEdit(dialog)
            filterField.setGeometry(120, 60, 150, 30)

            # OK and Cancel Buttons
            okButton = QtWidgets.QPushButton("OK", dialog)
            okButton.setGeometry(50, 110, 80, 30)
            okButton.clicked.connect(dialog.accept)

            cancelButton = QtWidgets.QPushButton("Cancel", dialog)
            cancelButton.setGeometry(150, 110, 80, 30)
            cancelButton.clicked.connect(dialog.reject)

            # Show the dialog and get the result
            if dialog.exec() == QtWidgets.QDialog.Accepted:
                    selectedField = filterCriteria.currentText()
                    filterValue = filterField.text()
                    return selectedField, filterValue
            else:
                    return None
    # Utility Function: Show Video in New Window
    def show_video(self, frames, title):
        """Display video frames in a new window."""
        try:
            window = QtWidgets.QWidget()
            window.setWindowTitle(title)
            layout = QtWidgets.QVBoxLayout(window)

            video_label = QtWidgets.QLabel(window)
            video_label.setAlignment(QtCore.Qt.AlignCenter)
            layout.addWidget(video_label)

            timer = QtCore.QTimer(window)
            timer.start(50)  # Adjust playback speed
            window.show()
        except Exception as e:
            print(f"Error in visualize_channels: {e}")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MediMetrics"))
        self.pbDataManagement2.setText(_translate("MainWindow", "Data Management"))
        self.pbDataAnalysis2.setText(_translate("MainWindow", "Data Analysis"))
        self.pbSpectrumAnalysis2.setText(_translate("MainWindow", "Spectrum Analysis"))
        self.pbImageProcessing2.setText(_translate("MainWindow", "Image Processing"))
        self.pbVideoProcessing2.setText(_translate("MainWindow", "Video Processing"))
        # self.ECGlabel.setText(_translate("MainWindow", "ECG Signal Analysis"))
        # self.label_46.setText(_translate("MainWindow", "Data Management"))
        # self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Tab 1"))
        # self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Tab 2"))
        # self.groupBox_.setTitle(_translate("MainWindow", "Settings"))
        self.LoadBtnsignal.setText(_translate("MainWindow", "Load Data"))
        self.LoadBtnsignal.setToolTip("Click to load ECG signal data.")
        self.label_3.setText(_translate("MainWindow", "Go to:"))
        self.timeInput.setText(_translate("MainWindow", "00:00:00"))
        # self.label_2.setText(_translate("MainWindow", "Window duration:"))
        # self.windowDurationSlider.setText(_translate("MainWindow", "5 seconds"))
        # self.label_48.setText(_translate("MainWindow", "Parameters"))
        # self.label_49.setText(_translate("MainWindow", "Fast Fourier Transform"))
        self.label_50.setText(_translate("MainWindow", "Norm"))
        self.NormcomboBox.setCurrentText(_translate("MainWindow", "backward"))
        self.NormcomboBox.setItemText(0, _translate("MainWindow", "backward"))
        self.NormcomboBox.setItemText(1, _translate("MainWindow", "ortho"))
        self.NormcomboBox.setItemText(2, _translate("MainWindow", "forward"))
        self.NormcomboBox.setToolTip("Select the norm for the Fourier Transform.")
        # self.label_51.setText(_translate("MainWindow", "Periodogram"))
        self.label_52.setText(_translate("MainWindow", "Window"))
        self.WindowcomboBox.setCurrentText(_translate("MainWindow", "boxcar"))
        self.WindowcomboBox.setItemText(0, _translate("MainWindow", "boxcar"))
        self.WindowcomboBox.setItemText(1, _translate("MainWindow", "hamming"))
        self.WindowcomboBox.setItemText(2, _translate("MainWindow", "hann"))
        self.label_53.setToolTip(_translate("MainWindow", "Selects between computing the power spectral density (‘density’) where Pxx has units of V**2/Hz and computing the squared magnitude spectrum (‘spectrum’) where Pxx has units of V**2, if x is measured in V and fs is measured in Hz."))
        self.label_53.setText(_translate("MainWindow", "Scaling"))
        self.ScalingcomboBox.setCurrentText(_translate("MainWindow", "density"))
        self.ScalingcomboBox.setItemText(0, _translate("MainWindow", "density"))
        self.ScalingcomboBox.setItemText(1, _translate("MainWindow", "spectrum"))
        # self.pbValidate.setText(_translate("MainWindow", "Validate"))
        # # self.uipanel2.setTitle(_translate("MainWindow", "Image Preview"))
        # self.uipanel1.setTitle(_translate("MainWindow", "Settings"))

import resources_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
